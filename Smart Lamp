Sambungan Elektrik
Relay ke ESP8266:

Sambungkan relay kepada pin digital ESP8266. Contohnya:
Relay 1 (Lampu 1) → D1
Relay 2 (Lampu 2) → D2
Relay 3 (Lampu 3) → D3
Relay 4 (Kipas) → D4
Sambungkan pin VCC dan GND relay kepada 5V dan GND ESP8266.
DHT11 ke ESP8266:

Pin VCC DHT11 → 3.3V ESP8266
Pin GND DHT11 → GND ESP8266
Pin Data DHT11 → D5 ESP8266
Lampu dan Kipas:

Sambungkan output relay kepada lampu dan kipas melalui sambungan AC 240V. Pastikan litar disambungkan dengan berhati-hati dan gunakan perlindungan (fuse/circuit breaker).


Koding:

#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <SimpleDHT.h>

// WiFi dan ThingsBoard Configurations
const char* ssid = "YOUR_WIFI_SSID";
const char* password = "YOUR_WIFI_PASSWORD";
const char* mqtt_server = "demo.thingsboard.io"; // Server URL
const char* token = "YOUR_ACCESS_TOKEN";

// Pin Definitions
#define DHTPIN D5
#define RELAY_LAMP1 D1
#define RELAY_LAMP2 D2
#define RELAY_LAMP3 D3
#define RELAY_FAN D4

// DHT11 Sensor
SimpleDHT11 dht11;

// MQTT Client
WiFiClient espClient;
PubSubClient client(espClient);

// Fungsi untuk setup WiFi
void setupWiFi() {
  Serial.print("Connecting to WiFi...");
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("WiFi connected!");
}

// Fungsi untuk callback MQTT
void callback(char* topic, byte* payload, unsigned int length) {
  String message;
  for (int i = 0; i < length; i++) {
    message += (char)payload[i];
  }

  // Kawalan Relay berdasarkan mesej
  if (message == "ON_LAMP1") digitalWrite(RELAY_LAMP1, LOW);
  if (message == "OFF_LAMP1") digitalWrite(RELAY_LAMP1, HIGH);
  if (message == "ON_LAMP2") digitalWrite(RELAY_LAMP2, LOW);
  if (message == "OFF_LAMP2") digitalWrite(RELAY_LAMP2, HIGH);
  if (message == "ON_LAMP3") digitalWrite(RELAY_LAMP3, LOW);
  if (message == "OFF_LAMP3") digitalWrite(RELAY_LAMP3, HIGH);
  if (message == "ON_FAN") digitalWrite(RELAY_FAN, LOW);
  if (message == "OFF_FAN") digitalWrite(RELAY_FAN, HIGH);
}

// Fungsi untuk reconnect MQTT
void reconnect() {
  while (!client.connected()) {
    if (client.connect("ESP8266Client", token, NULL)) {
      client.subscribe("v1/devices/me/rpc/request/+");
    } else {
      delay(5000);
    }
  }
}

// Setup
void setup() {
  Serial.begin(115200);

  // Setup WiFi
  setupWiFi();

  // Setup MQTT
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);

  // Setup pin Relay
  pinMode(RELAY_LAMP1, OUTPUT);
  pinMode(RELAY_LAMP2, OUTPUT);
  pinMode(RELAY_LAMP3, OUTPUT);
  pinMode(RELAY_FAN, OUTPUT);

  // Matikan relay (HIGH untuk relay off)
  digitalWrite(RELAY_LAMP1, HIGH);
  digitalWrite(RELAY_LAMP2, HIGH);
  digitalWrite(RELAY_LAMP3, HIGH);
  digitalWrite(RELAY_FAN, HIGH);
}

// Loop
void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  // Bacaan suhu dan kelembapan
  byte temperature = 0;
  byte humidity = 0;
  int err = dht11.read(DHTPIN, &temperature, &humidity, NULL);
  if (err != SimpleDHTErrSuccess) {
    Serial.print("DHT11 Error: ");
    Serial.println(err);
    delay(2000);
    return;
  }

  // Papar nilai suhu dan kelembapan
  Serial.print("Temperature: ");
  Serial.print(temperature);
  Serial.print("°C, Humidity: ");
  Serial.print(humidity);
  Serial.println("%");

  // Hantar data ke ThingsBoard
  String payload = String("{\"temperature\":") + temperature + ",\"humidity\":" + humidity + "}";
  client.publish("v1/devices/me/telemetry", payload.c_str());

  delay(2000); // Tunggu 2 saat sebelum bacaan seterusnya
}
