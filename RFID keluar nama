#include <Wiegand.h>
#include <Servo.h>
#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <map>

// Wiegand RFID Reader
WIEGAND wg;

// Servo Motor Pin
#define SERVO_PIN 13

// PIR Sensor Pin
#define PIR_PIN 14

// Buzzer Pin
#define BUZZER_PIN 12

// WiFi Credentials
const char* ssid = "WiFi_Nama"; // Ganti dengan nama WiFi anda
const char* password = "WiFi_Password"; // Ganti dengan kata laluan WiFi anda

// ThingsBoard Credentials
const char* mqtt_server = "demo.thingsboard.io";
const char* access_token = "ACCESS_TOKEN"; // Ganti dengan access token peranti anda

WiFiClient espClient;
PubSubClient client(espClient);
Servo myServo;

// Simpanan ID RFID dan Nama Pengguna
std::map<String, String> users = {
  {"12345678", "Ali Bin Abu"},
  {"87654321", "Ahmad Bin Bakar"},
  {"11223344", "Aisyah Binti Ali"}
};

// Status Sistem
bool isDoorOpen = false;

void setup() {
  // Serial Monitor
  Serial.begin(115200);

  // WiFi Connection
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Menyambung ke WiFi...");
  }
  Serial.println("WiFi tersambung.");

  // ThingsBoard MQTT Connection
  client.setServer(mqtt_server, 1883);

  // Wiegand RFID Reader Initialization
  wg.begin(4, 5); // D0 dan D1 pada GPIO4 dan GPIO5

  // Servo Motor Initialization
  myServo.attach(SERVO_PIN);
  myServo.write(0); // Servo dalam kedudukan terkunci

  // Pin Modes
  pinMode(BUZZER_PIN, OUTPUT);
  pinMode(PIR_PIN, INPUT);
  digitalWrite(BUZZER_PIN, LOW);

  Serial.println("Sistem keselamatan siap.");
}

void loop() {
  // Reconnect MQTT jika perlu
  if (!client.connected()) {
    reconnectMQTT();
  }
  client.loop();

  // Bacaan RFID
  if (wg.available()) {
    String cardID = String(wg.getCode(), HEX);
    cardID.toUpperCase();
    String userName = "Unknown"; // Default jika ID tidak dikenali

    // Cari nama berdasarkan ID
    if (users.find(cardID) != users.end()) {
      userName = users[cardID];
    }

    // Proses berdasarkan ID
    if (userName != "Unknown") {
      bukaPintu();
      hantarStatus("Pintu dibuka", cardID, userName, "Berjaya");
    } else {
      Serial.println("Akses ditolak.");
      hantarStatus("Pintu terkunci", cardID, userName, "Ditolak");
    }
  }

  // Bacaan PIR untuk tutup pintu
  if (digitalRead(PIR_PIN) == HIGH && isDoorOpen) {
    tutupPintu();
    hantarStatus("Pintu terkunci", "-", "-", "Pintu ditutup oleh PIR");
  }
}

void bukaPintu() {
  Serial.println("Pintu dibuka.");
  myServo.write(90); // Servo bergerak ke kedudukan buka
  digitalWrite(BUZZER_PIN, HIGH); // Buzzer berbunyi
  isDoorOpen = true;
  delay(3000); // Pintu tetap terbuka selama 3 saat
}

void tutupPintu() {
  Serial.println("Pintu ditutup.");
  myServo.write(0); // Servo bergerak ke kedudukan tutup
  digitalWrite(BUZZER_PIN, LOW); // Buzzer berhenti berbunyi
  isDoorOpen = false;
  delay(1000); // Tunggu sebelum membaca pergerakan baru
}

void hantarStatus(String statusPintu, String idKad, String namaPengguna, String statusAkses) {
  String payload = "{\"pintu\":\"" + statusPintu + 
                   "\",\"id_kad\":\"" + idKad + 
                   "\",\"nama\":\"" + namaPengguna + 
                   "\",\"status_akses\":\"" + statusAkses + "\"}";
  client.publish("v1/devices/me/telemetry", payload.c_str());
}

void reconnectMQTT() {
  while (!client.connected()) {
    Serial.println("Menyambung ke ThingsBoard...");
    if (client.connect("ESP8266", access_token, NULL)) {
      Serial.println("ThingsBoard tersambung.");
    } else {
      Serial.print("Gagal sambung, cuba lagi dalam 5 saat...");
      delay(5000);
    }
  }
}
